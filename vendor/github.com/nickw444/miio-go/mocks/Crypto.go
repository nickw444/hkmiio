// Code generated by mockery v1.0.0
package mocks

import mock "github.com/stretchr/testify/mock"
import packet "github.com/nickw444/miio-go/protocol/packet"

// Crypto is an autogenerated mock type for the Crypto type
type Crypto struct {
	mock.Mock
}

// Decrypt provides a mock function with given fields: data
func (_m *Crypto) Decrypt(data []byte) ([]byte, error) {
	ret := _m.Called(data)

	var r0 []byte
	if rf, ok := ret.Get(0).(func([]byte) []byte); ok {
		r0 = rf(data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Encrypt provides a mock function with given fields: data
func (_m *Crypto) Encrypt(data []byte) ([]byte, error) {
	ret := _m.Called(data)

	var r0 []byte
	if rf, ok := ret.Get(0).(func([]byte) []byte); ok {
		r0 = rf(data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewPacket provides a mock function with given fields: data
func (_m *Crypto) NewPacket(data []byte) (*packet.Packet, error) {
	ret := _m.Called(data)

	var r0 *packet.Packet
	if rf, ok := ret.Get(0).(func([]byte) *packet.Packet); ok {
		r0 = rf(data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*packet.Packet)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VerifyPacket provides a mock function with given fields: pkt
func (_m *Crypto) VerifyPacket(pkt *packet.Packet) error {
	ret := _m.Called(pkt)

	var r0 error
	if rf, ok := ret.Get(0).(func(*packet.Packet) error); ok {
		r0 = rf(pkt)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
