// Code generated by mockery v1.0.0
package mocks

import common "github.com/nickw444/miio-go/subscription/common"
import mock "github.com/stretchr/testify/mock"

import time "time"

// Protocol is an autogenerated mock type for the Protocol type
type Protocol struct {
	mock.Mock
}

// CloseAllSubscriptions provides a mock function with given fields:
func (_m *Protocol) CloseAllSubscriptions() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Discover provides a mock function with given fields:
func (_m *Protocol) Discover() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// HasSubscribers provides a mock function with given fields:
func (_m *Protocol) HasSubscribers() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// NewSubscription provides a mock function with given fields:
func (_m *Protocol) NewSubscription() (common.Subscription, error) {
	ret := _m.Called()

	var r0 common.Subscription
	if rf, ok := ret.Get(0).(func() common.Subscription); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Subscription)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Publish provides a mock function with given fields: event
func (_m *Protocol) Publish(event interface{}) error {
	ret := _m.Called(event)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(event)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveSubscription provides a mock function with given fields: s
func (_m *Protocol) RemoveSubscription(s common.Subscription) error {
	ret := _m.Called(s)

	var r0 error
	if rf, ok := ret.Get(0).(func(common.Subscription) error); ok {
		r0 = rf(s)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetExpiryTime provides a mock function with given fields: duration
func (_m *Protocol) SetExpiryTime(duration time.Duration) {
	_m.Called(duration)
}
